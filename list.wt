
length x =
    x == [] ? 0 : 1 + length (tl x)

map f x =
    x == [] ? [] : f (hd x) :: map f (tl x)

append x y =
    x == [] ? y : (hd x) :: append (tl x) y

reverse x =
    x == [] ? [] : append (reverse (tl x)) [hd x]

filter p x =
    x == [] ? []
            : p (hd x) ? (hd x) :: filter p (tl x)
                       : filter p (tl x)

/*
length x =
    if x == [] then 0
    else 1 + length (tl x)

map f x =
    if x == [] then []
    else f (hd x) :: map f (tl x)

append x y =
    if x == [] then y
    else (hd x) :: append (tl x) y

reverse x =
    if x == [] then []
    else append (reverse (tl x)) [hd x]

filter p x =
    if x == [] then []
    else if p (hd x) then
        (hd x) :: filter p (tl x)
    else filter p (tl x)
*/
